package com.sist.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
	정규식 : 문자의 패턴을 만드는 과정
			-------------------
	-> [] -> 한 개의 문자 [a] -> [abc] a, b, c
		  - [abcd...z] -> [a-z]
		  - [ABCD...Z] -> [A-Z]
		  - 알파벳 전체 -> [a-zA-Z] -> contains
		  - 알파벳 시작 -> ^[a-zA-Z] -> startsWith
		  - 알파벳 끝 -> [a-zA-z]$ -> endsWith
		  - 알파벳 제외 -> [^a-zA-Z]
		  --------------------------------------
		  숫자 [0-9] : 숫자 전체
		  한글 [가-힣] : 한글 전체 
		  [] -> ^(시작과 제외 ) $(끝 문자)
		  --------------------------------------
		  [0-9] -> \d : 숫자전체의 표현법이 두 가지 -----> \D 대문자인 경우 부정을 뜻함 -> 숫자가 아닌
		  		  		   \s : 공백 -----> \S	공백이 아닌
		  		   \w : [a-zA-Z0-9] -> 한 개의 알파벳 / 한 개의 숫자 ---\W -> 특수문자
		  
		  맛있고 맛있다 맛있니 .......	
		  + : 1개 이상 ex) 맛있+ ("맛있"으로 시작하는 모든 단어 출력) \\+
		  짜 짜다 짜고 짜니.....
		  * : 0개 이상 ex) 짜* \\*
		  . : 임의의 한 글자 \\*
		  ? : 0 or 1개 	\\?
		  {n} -> n번 반복  -> \d{4} -> 1234
		  {n,}-> n번 이상 반복 -> a{2,} aa aaa
		  {n, m} -> n~m번 반복	a{2,4} aa, aaa, aaaa
		  -> 정규식 : 검색할 때 주로 사용 -> 자바스크립트, 오라클
		  
		  EN IN KN
		  WHERE enam LIKE '%EN%' OR LIKE '%IN%' OR LIKE '%KN%'
		  
		  WHERE REGEXP_LIKE(enam, 'EN|IN|KN')
		  
		  () -> 그룹 -> (ab)+ -> abab
		  ---------------------------
		  table 
		    |
		   tr
		   |
      -------------
      |		      |
      th		 td
    ------------------
      (tr)+
      (th|td)+   -> loose.dtd <!DOCTYPE html>
      
      ex) ip
      		211.238.142.124
      					--- 1~3
      				--- 1~3
      			--- 1~3
      		--- 1~3
      		127.0.0.1
      		211 63.64.1
      	
      	[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}
      	\\d{1,3|\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}
		--- [0-9]
		실제 -> 특수문자 -> \\
		


*/
public class 라이브러리_정규식표현법_1 {

	public static void main(String[] args) {
		String[] ips = {
				"211.238.142.124",
				"127.0.0.1",
				"010.1111.1111",
				"1234.1235",
				"111.111.111.0"
		};
		//String s = "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}";
		String s = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}";
		Pattern p = Pattern.compile(s);
		
		for(int i = 0; i < ips.length; i++)
		{
			Matcher m = p.matcher(ips[i]);
			if(m.find())
			{
				System.out.println(ips[i]);
			}
		}
	}

}
