package com.sist.main;

/*
	1. 6장 -> 클래스 / 클래스 구성요소 / 메소드 오버로딩
		= 클래스
			정의 -> 객체 생성을 위한 기본 틀(설계도)
			구성요소
				- 변수(필드) : 객체의 속성(변수)
				- 생성자 : 변수에 대한 초기화
				- 메소드 : 객체의 동작
				
				설계 
					-> 어떤 기능(메소드)
					-> 메소드에서 사용하는 데이터
					-> 초기화 여부
						------
						1. 초기화가 필요한 경우
							인스턴스변수 -> 생성자
							static 변수 -> static 블록
							-------------------------
							메모리에 저장 후에 사용 -> 클래스명 객체명 = new 클래스명()
							클래스명 -> 데이터형(지원하지 않는 데이터형이 있는 경우에 사용자 정의 데이터 만들어서 사용)
							객체명 -> 변수
							new -> 클래스 크기만큼 메모리를 만들어서 저장
							생성자 -> 초기값 대입
							-> 메모리에 저장시에는 반드시 new 생성자()
							class A
							{
								public void display()
								{
								}
							}
							A a = new A();
							a.display();
							new A().display(); : 간략하게 사용시
							----------------------------------
							
							class A
							{
								public void aaa(){}
								public void bbb(){}
							}
							A a = new A();
							a.aaa();
							a.bbb();
							
							new A().aaa();
							new A().bbb();
							
				class ClassName
				{
					---------------------------
					1. 변수
						-> 인스턴스 : 객체마다 가지고 잇는 변수
							- new를 사용시 메모리가 따로 생성
						-> 정적변수 : 한 개의 메모리만 사용
							- 생성된 모든 객체가 공유
							- static
						-> 자동 초기화 -> 저장시에 바로 사용이 가능
						역할 : 객체의 상태 / 데이터를 저장
						-> int -> 0, boolean -> false ...
					---------------------------
					2. 생성자
						- 객체 생성시에 변수를 초기화
						- 시작과 동시에 처리하는 기능
							ex) 자동 로그인 / 화면 UI출력 / 서버구동
						- 기본 생성자(매개변수가 없는 생성자)
							** 생성자를 사용하지 않으면 자동으로 추가
						- 특징
							1) 클래스명과 동일
							2) 리턴형이 없다
							3) 오버로딩 -> 여러개의 생성자가 필요한 경우도 있다
								-> 구분 : 매개변수
								-> 갯수나 데이터형이 다른 경우 : 다른 메소드로 인식
								-> 초기화시에 다른 초기화를 주는 경우
					---------------------------
					메소드
						역할 : 객체의 동작을 하기 위한 블록
						선언 형태 : 
							리턴형 메소드명(매개변수...)
							{
								실행 
								return 값;
							}
							리턴형 : 기본형 / 배열 / 클래스
									사용자 요청에 대한 결과값
									결과값 있는 경우 : 해당 데이터형
									결과값 없는 경우 : void
								ex)로그인 처리 요청 : boolean
									영화목록을 출력 : Movie[]
									DB에 추가 : void
									아이디 찾기 : String
								메소드 : 변수 식별자
										권장) 소문자, 알파벳을 사용, 임시 _
								매개변수
									없는 경우 : 자체 처리 -> 출력
									있는 경우 : 사용자 요청 / 여러개인 경우(3개 이상) -> 클래스 / 배열
											  사용자가 요청한 값이 몇 개인지 모르는 경우 -> 가변 매개변수(데이터형... 변수)
											  									----------- 데이터형이 여러개 -> Object...
											  									Object가 데이터형 중 가장 큰 데이터형
											  									Object는 자바의 최상위 클래스
											  									모든 클래스(라이브러리, 사용자 정의 포함)
					---------------------------
					return
						-> 요청 결과값 -> 없는 경우(void)는 생략이 가능
						return -> 메소드의 종료
						-> 생략시에는 컴파일러가 자동으로 추가
						-> return은 원하는 위치에서 사용이 가능
						-> return이 있는 위치에서 메소드가 종료
						-> return 기본값 / 배열명 / 객체
					-----------------------
					** 메소드 호출
						-> return까지 수행 -> 호출위치로 돌아간다
						-> 인스턴스 : 객체명.메소드명(값...)
						-> 정적 : 클래스명.메소드명(값...)
						-------------------------------- 인스턴스 변수와 상관 없는 경우
						이미지 축소/확대/한글변환
					-> static 메소드
					{
						static만 사용이 가능
						-> 인스턴스 사용시에는 반드시 객체 생성 후 사용
					}
					인스턴스 메소드
					{
						인스턴스는 사용이 가능
						static도 사용이 가능
					}
				}
			---------------------------------------------------------
			메소드 : 오버로딩 / 오버라이딩
				   ------
				   조건)
				   	1) 한 개의 클래스 내에서 제작
				   	2) 메소드 동일
				   	3) 매개변수의 갯수, 데이터형이 다른 경우
				   		add(int a, int b) -> add(int, int)
				   		add(int c, int d) -> add(int, int)
						-> 매개변수명은 상관없다
					4) 리턴형은 관계없다
						int add(int a, int b)
						void add(int a, int b) -> 같은 메소드
					5) 접근 지정어도 관계없다
					-----------------------------------------
					장점 : 같은 기능을 하는 메소드를 한 개의 이름 관리가 가능
						  -------
						  + :  add(int, int) add(double, double)
						  ex)
						  	printInt(), printByte(), printShort(), printDouble(), printString() 
					-----------------------------------------------------------------------------
					오버라이딩 : 기존의 클래스가 가지고 있는 메소드를 수정
					-------
					조건)
						1. 상속이 있는 경우
						   --- 추상 클래스 / 인터페이스
						   		----------------- 상속을 받아서 처리, 독립적 사용이 불가능, 미완성된 클래스(메소드 구현X)
						2. 메소드명이 동일
						3. 매개변수가 동일
						4. 리턴형이 동일
						5. 접근지정어는 확대는 가능 축소는 불가능하다
						private < default < protected < public
						
						void display()
						-> protected void display();
						-> public void display();
						-> void display()
						-> private void display() x
							-------- 축소
						오버로딩 : 새로운 기능 추가
						오버라이딩 : 기존의 메소드를 변경
						------- 인터페이스 / 라이브러리 변경
						*** 자바는 오버라이딩 프로그램이다
						*** 현실에 맞게 변경



*/

class Board
{
	public void list()
	{
		System.out.println("자유게시판 출력");
	}
	// 다운로드
	public void detail(int no)
	{
		System.out.println(no+"번째 게시물 상세보기 출력");
	}
	// 업로드
	void insert()
	{
		System.out.println("새로운 게시물 추가");
	}
}
class DataBoard extends Board
{
	public void detail(int no)
	{
		System.out.println("다운로드 기능 추가");
		System.out.println(no+"번째 게시물 상세보기 출력");
	}
	void insert()
	{
		System.out.println("업로드 기능 추가");
		System.out.println("새로운 게시물 추가");
	}
	public void list()
	{
		System.out.println("답변 추가해서 출력");
	}
	public void reply()
	{
		System.out.println("댓글 올리기...");
	}
}

public class 정리_1 {

	public static void main(String[] args) {
		

	}

}
