/*
	변수 - 데이터 저장방법(메모리)
			-한 개 , 다른 데이터 여러개(클래스), 같은 데이터 여러개(배열)
	연산자 / 제어문 - 변수에 대한 연산처리
				- 메소드
				- 데이터 가공
	화면 출력
	
	변수 / 메소드 / 화면출력 -> 클래스 -> 관련된 클래스 묶음 : 패키지
	
	1) 구성요소
	2) 패키지
	3) 접근 지정자
	------------변수의 초기화
	
	기본
	의뢰 --> 요구사항 분석 --> 데이터 설계 --> 구현 --> 테스팅 --> 배포
	------------------    ----------    ---    -----  -------    
	      PM				DBM		  프로그래머  테스터     운영
	      								|________________|
	      										ㄴ DevOps
	      |
	    클래스 설계 						|
	    							객체 생성      	|
	    									       호출
	    									       
	객체지향의 목적
	1) 유지보수 : 수정 시 영향을 최소화
		** 다른 클래스의 영향이 없게 구현 -> 결합성
			결합성이 낮은 프로그램 
			인터페이스 -> 스프링
	2) 재사용의 목적 : 상속(is - a) / 포함 (has - a)
	3) 확장성 높은 프로그램 -> 추가 / 수정
						  --------- 다형성
		| 호환성(운영체제의 독립적이다)
	4) 코드 가독성 증가(코드가 간결하다)
	   ------------
	   | 검증된 소스를 사용하기 때문에 신뢰성이 뛰어나다
	     --------------------- 라이브러리
	5) 데이터를 보호 : 캡슐화
	--------------------------------------------------------
	1. 캡슐화 : 접근 지정어 -> 접근 범위
	   ----- 변수와 관련
	   접근 지정어 : public protected private defalut
	2. 재사용 
		- 상속 : 기존 클래스를 확장해서 사용(extends)
		- 포함 : 기존 클래스를 그대로 사용
	3. 수정 - 오버라이딩
	   추가 - 오버로딩 
	   	-> 다형성
	4. 추상화
		- 공통모듈 -> 공통적인 -> 소스 간결
		- 추상 클래스 / 인터페이스(추상 클래스의 확장)
 -------------------------------------------객체지향 4대요소
	
	객체지향 제작
	---------
	클래스 : 관련된데이터를 여러개 묶어서 메모리에 한 번에 저장하기 위한 설계
	클래스의 구성요소
		- 데이터 저장 : 변수
		- 데이터 활용 : 메소드
		- 데이터 주입(초기화) : 생성자
	
	1) 변수
		인스턴스 변수
			-> 저장되는 시점 : new를 사용해야 저장된다
			-> 객체마다 따로 생성되는 메모리
			-> 힙 메모리에 저장
			-> 프로그램종료시점까지 유지
			-> 전역변수(클래스 전체에서 사용하는 변수)
		정적 변수
			-> 저장되는 시점 : 컴파일시에 저장(자동저장)
			-> 메모리 공간을 1개만 사용
			-> MethodArea에 저장
			-> 곹통으로 사용되는 변수가 있는 경우 -> 데이터베이스(오라클, MySQL) -> 공유변수 -> 로고
		지역 변수
			-> 주로 메소드에서 사용
			-> 저장되는 시점 : 메소드 호출
			-> 메소드가 종료시에 자동 회수
			-> 스택 공간에 저장
			-> 유사한 변수 : 매개변수
	------------------------------------------------------
	1. 선언위치
		class ClassName{
		-----------------
		 인스턴스 / 정적변수
		 -----------------
		 메소드
		 	-> 지역변수
		------------------
		}
	2. 저장위치
		인스턴스 : Heap
		전역변수 : MethodArea
		지역변수 : 메소드
	3. 생명주기
		인스턴스 : Heap
		전역변수 : MethodArea
		-------------------- 프로그램 종료시까지 
		지역변수 : 메소드
		-------------------- 메소드 종료시까지 사용
		*** 인스턴스 변수 -> 객체명.변수명
					   -> 클래스 블록에 선언
					   -> 자동 초기화
					   		int -> 0
					   		double -> 0.0
					   		long -> 0L
					   		boolean -> false
					   		char -> '\0'
					   		String -> null
					   	-> 초기화
					   		1) 명시적 초기화 ****
					   		2) 초기화 블록
					   		3) 생성자 : 변수 초기화를 담당하는 역할
					   	*** 클래스 블록
					   	class ClassName{
					   		static int a; -> 0값 초기화
					   		-> static int a = 10; -> 명시적인 초기화
					   	}
					   	-> static은 공유
					   		static은 static만 호출이 가능
					   		-> 인스턴스를 호출 시에는 반드시 클래스 메모리 할당
		*** 정적변수 -> 클래스명.변수명 -> static
						class ClassName{
					   		구현은 할 수 없으며 선언만 가능
					   		구현 : 연산자 처리 / 제어문 , 파일 읽기, 데이터베이스연결, 서버연결
					   	}
		*** 지역변수 : 메소드 안에서만 사용 가능 -> 변수명
		*** 지역변수 : 우선 순위
			---------------
			-> 메소드, 생성자, 블록 내부에서 선언
			-> 반드시 초기화 후에 사용
			-> 메소드 실행이 끝나면 자동 소멸
		*** 프로그램에서 계속 유지해야하는 변수
		    -------------------------- 인스턴스 : 따로 저장
		    						   정적변수 : 한 개만 사용
		*** 사용 후에 버리는 경우 : 지역변수
			반복문
			




*/
public class 클래스구성요소_변수 {

	public static void main(String[] args) {
		

	}

}
